"use client";

import { useState, useEffect } from "react";
import {
  PlusCircleIcon,
  PencilSquareIcon,
  TrashIcon,
  XMarkIcon,
} from "@heroicons/react/24/outline";
import axiosClient from "@/lib/axiosClient";
import { toast } from "sonner";

interface Template {
  id: number;
  name: string;
  subject: string | null;
  body: string;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

export default function TemplatesPage() {
  const [templates, setTemplates] = useState<Template[]>([]);
  const [loading, setLoading] = useState(true);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [currentTemplate, setCurrentTemplate] = useState<Template | null>(null);
  const [formData, setFormData] = useState({
    name: "",
    subject: "",
    body: "",
    is_active: true,
  });

  const fetchTemplates = async () => {
    try {
      setLoading(true);
      const response = await axiosClient.get("/templates");
      setTemplates(response.data);
    } catch (error) {
      console.error("Failed to fetch templates:", error);
      toast.error("Failed to load templates");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTemplates();
  }, []);

  const handleCreateTemplate = async () => {
    try {
      await axiosClient.post("/template", formData);
      setIsCreateDialogOpen(false);
      setFormData({ name: "", subject: "", body: "", is_active: true });
      toast.success("Template created successfully");
      fetchTemplates();
    } catch (error) {
      console.error("Failed to create template:", error);
      toast.error("Failed to create template");
    }
  };

  const handleUpdateTemplate = async () => {
    if (!currentTemplate) return;

    try {
      await axiosClient.put(`/template/${currentTemplate.id}`, formData);
      setIsEditDialogOpen(false);
      setCurrentTemplate(null);
      setFormData({ name: "", subject: "", body: "", is_active: true });
      toast.success("Template updated successfully");
      fetchTemplates();
    } catch (error) {
      console.error("Failed to update template:", error);
      toast.error("Failed to update template");
    }
  };

  const handleDeleteTemplate = async () => {
    if (!currentTemplate) return;

    try {
      await axiosClient.delete(`/template/${currentTemplate.id}`);
      setIsDeleteDialogOpen(false);
      setCurrentTemplate(null);
      toast.success("Template deleted successfully");
      fetchTemplates();
    } catch (error) {
      console.error("Failed to delete template:", error);
      toast.error("Failed to delete template");
    }
  };

  const openEditDialog = (template: Template) => {
    setCurrentTemplate(template);
    setFormData({
      name: template.name,
      subject: template.subject || "",
      body: template.body,
      is_active: template.is_active,
    });
    setIsEditDialogOpen(true);
  };

  const openDeleteDialog = (template: Template) => {
    setCurrentTemplate(template);
    setIsDeleteDialogOpen(true);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  };

  // Modal structure that can be reused
  const Modal = ({
    isOpen,
    onClose,
    title,
    children,
  }: {
    isOpen: boolean;
    onClose: () => void;
    title: string;
    children: React.ReactNode;
  }) => {
    if (!isOpen) return null;

    return (
      <div className="fixed inset-0 z-50 bg-black/50 flex items-center justify-center">
        <div className="bg-white dark:bg-gray-800 rounded-lg w-full max-w-md md:max-w-lg">
          <div className="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 px-6 py-4">
            <h3 className="text-lg font-medium">{title}</h3>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300"
            >
              <XMarkIcon className="w-5 h-5" />
            </button>
          </div>
          <div className="px-6 py-4">{children}</div>
        </div>
      </div>
    );
  };

  return (
    <div className="container mx-auto py-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Templates</h1>
        <button
          onClick={() => setIsCreateDialogOpen(true)}
          className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md"
        >
          <PlusCircleIcon className="h-4 w-4" /> Create Template
        </button>
      </div>

      {loading ? (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-600"></div>
        </div>
      ) : templates.length === 0 ? (
        <div className="text-center py-12 bg-gray-100 dark:bg-gray-800 rounded-lg">
          <h3 className="text-lg font-medium">No templates found</h3>
          <p className="text-gray-500 dark:text-gray-400 mt-2">
            Create a new template to get started
          </p>
          <button
            onClick={() => setIsCreateDialogOpen(true)}
            className="mt-4 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md"
          >
            Create Template
          </button>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {templates.map((template) => (
            <div
              key={template.id}
              className="overflow-hidden hover:shadow-lg transition-shadow border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800"
            >
              <div className="p-6 pb-3 border-b border-gray-200 dark:border-gray-700">
                <h3 className="text-xl font-semibold">{template.name}</h3>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  ID: {template.id} â€¢ Updated {formatDate(template.updated_at)}
                </p>
                {template.subject && (
                  <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                    Subject: {template.subject}
                  </p>
                )}
                <div className="flex items-center mt-1">
                  <span
                    className={`inline-block w-2 h-2 rounded-full mr-2 ${
                      template.is_active ? "bg-green-500" : "bg-gray-300"
                    }`}
                  ></span>
                  <span className="text-xs text-gray-500 dark:text-gray-400">
                    {template.is_active ? "Active" : "Inactive"}
                  </span>
                </div>
              </div>
              <div className="p-6 pt-3">
                <p className="line-clamp-3 text-gray-500 dark:text-gray-400">
                  {template.body}
                </p>
              </div>
              <div className="flex justify-end gap-2 p-6 pt-0">
                <button
                  onClick={() => openEditDialog(template)}
                  className="flex items-center gap-1 px-3 py-1.5 text-sm border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700"
                >
                  <PencilSquareIcon className="h-4 w-4" /> Edit
                </button>
                <button
                  onClick={() => openDeleteDialog(template)}
                  className="flex items-center gap-1 px-3 py-1.5 text-sm text-white bg-red-600 hover:bg-red-700 rounded-md"
                >
                  <TrashIcon className="h-4 w-4" /> Delete
                </button>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Create Template Dialog */}
      <Modal
        isOpen={isCreateDialogOpen}
        onClose={() => setIsCreateDialogOpen(false)}
        title="Create New Template"
      >
        <div className="grid gap-4">
          <div className="grid gap-2">
            <label htmlFor="name" className="text-sm font-medium">
              Template Name *
            </label>
            <input
              id="name"
              value={formData.name}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                setFormData({ ...formData, name: e.target.value })
              }
              placeholder="Enter template name"
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
              required
            />
          </div>
          <div className="grid gap-2">
            <label htmlFor="subject" className="text-sm font-medium">
              Subject
            </label>
            <input
              id="subject"
              value={formData.subject}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                setFormData({ ...formData, subject: e.target.value })
              }
              placeholder="Enter email subject (optional)"
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
            />
          </div>
          <div className="grid gap-2">
            <label htmlFor="body" className="text-sm font-medium">
              Template Body *
            </label>
            <textarea
              id="body"
              value={formData.body}
              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
                setFormData({ ...formData, body: e.target.value })
              }
              placeholder="Write your template content here..."
              rows={8}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
              required
            />
          </div>
          <div className="flex items-center space-x-2">
            <div className="relative flex items-start">
              <div className="flex h-5 items-center">
                <input
                  type="checkbox"
                  id="is_active"
                  checked={formData.is_active}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                    setFormData({
                      ...formData,
                      is_active: e.target.checked,
                    })
                  }
                  className="h-4 w-4 rounded border-gray-300"
                />
              </div>
              <div className="ml-2">
                <label
                  htmlFor="is_active"
                  className="text-sm font-medium leading-none"
                >
                  Active template
                </label>
              </div>
            </div>
          </div>
          <div className="flex justify-end gap-2 mt-4">
            <button
              onClick={() => setIsCreateDialogOpen(false)}
              className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700"
            >
              Cancel
            </button>
            <button
              onClick={handleCreateTemplate}
              className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md"
            >
              Create Template
            </button>
          </div>
        </div>
      </Modal>

      {/* Edit Template Dialog */}
      <Modal
        isOpen={isEditDialogOpen}
        onClose={() => setIsEditDialogOpen(false)}
        title="Edit Template"
      >
        <div className="grid gap-4">
          <div className="grid gap-2">
            <label htmlFor="edit-name" className="text-sm font-medium">
              Template Name *
            </label>
            <input
              id="edit-name"
              value={formData.name}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                setFormData({ ...formData, name: e.target.value })
              }
              placeholder="Enter template name"
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
              required
            />
          </div>
          <div className="grid gap-2">
            <label htmlFor="edit-subject" className="text-sm font-medium">
              Subject
            </label>
            <input
              id="edit-subject"
              value={formData.subject}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                setFormData({ ...formData, subject: e.target.value })
              }
              placeholder="Enter email subject (optional)"
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
            />
          </div>
          <div className="grid gap-2">
            <label htmlFor="edit-body" className="text-sm font-medium">
              Template Body *
            </label>
            <textarea
              id="edit-body"
              value={formData.body}
              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
                setFormData({ ...formData, body: e.target.value })
              }
              placeholder="Write your template content here..."
              rows={8}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
              required
            />
          </div>
          <div className="flex items-center space-x-2">
            <div className="relative flex items-start">
              <div className="flex h-5 items-center">
                <input
                  type="checkbox"
                  id="edit-is_active"
                  checked={formData.is_active}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                    setFormData({
                      ...formData,
                      is_active: e.target.checked,
                    })
                  }
                  className="h-4 w-4 rounded border-gray-300"
                />
              </div>
              <div className="ml-2">
                <label
                  htmlFor="edit-is_active"
                  className="text-sm font-medium leading-none"
                >
                  Active template
                </label>
              </div>
            </div>
          </div>
          <div className="flex justify-end gap-2 mt-4">
            <button
              onClick={() => setIsEditDialogOpen(false)}
              className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700"
            >
              Cancel
            </button>
            <button
              onClick={handleUpdateTemplate}
              className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md"
            >
              Save Changes
            </button>
          </div>
        </div>
      </Modal>

      {/* Delete Template Confirmation Dialog */}
      <Modal
        isOpen={isDeleteDialogOpen}
        onClose={() => setIsDeleteDialogOpen(false)}
        title="Delete Template"
      >
        <div>
          <p className="text-gray-500 dark:text-gray-400">
            Are you sure you want to delete &quot;{currentTemplate?.name}
            &quot;? This action cannot be undone.
          </p>
          <div className="flex justify-end gap-2 mt-6">
            <button
              onClick={() => setIsDeleteDialogOpen(false)}
              className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700"
            >
              Cancel
            </button>
            <button
              onClick={handleDeleteTemplate}
              className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md"
            >
              Delete
            </button>
          </div>
        </div>
      </Modal>
    </div>
  );
}
